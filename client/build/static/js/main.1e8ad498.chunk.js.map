{"version":3,"sources":["utils/images/fantasy-book.jpg","utils/images/background.jpg","utils/Apollo.js","utils/reducers/threadSlice.js","utils/reducers/index.js","utils/State.js","components/Book/index.js","pages/Home.js","pages/NotFound.js","utils/mutations.js","utils/auth.js","components/LoginForm/index.js","pages/Signup.js","components/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ApolloClient","request","operation","token","localStorage","getItem","setContext","headers","authorization","uri","threadSlice","createSlice","name","initialState","genre","threadText","reducers","UPDATE_GENRE","state","action","payload","UPDATE_THREADTEXT","actions","thread","reducer","configureStore","rootReducer","PageCover","React","forwardRef","props","ref","className","data-density","children","PageContent","Page","src","image","alt","number","text","Book","width","height","Home","class","to","NotFound","LOGIN","gql","ADD_USER","decode","this","getToken","isTokenExpired","exp","Date","now","err","idToken","setItem","window","location","assign","removeItem","Login","useState","username","password","formState","setFormState","errorMessage","setErrorMessage","useMutation","login","error","handleChange","event","target","value","handleFormSubmit","a","preventDefault","length","variables","data","Auth","console","onSubmit","placeholder","type","id","onChange","Signup","email","addUser","NavBar","dispatch","useDispatch","setGenre","setText","Navbar","bg","expand","variant","Brand","role","Nav","loggedIn","onClick","logout","Item","Toggle","aria-controls","Collapse","Form","inline","FormControl","size","as","App","client","store","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1e8ad498.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fantasy-book.8ad143f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.747543f7.jpg\";","import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient({\r\n\trequest: (operation) => {\r\n\t\tconst token = localStorage.getItem('id_token');\r\n\t\toperation.setContext({\r\n\t\t\theaders: {\r\n\t\t\t\tauthorization: token ? `Bearer ${token}` : '',\r\n\t\t\t},\r\n\t\t});\r\n\t},\r\n\turi: '/graphql',\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const threadSlice = createSlice({\r\n\tname: 'thread',\r\n\tinitialState: {\r\n\t\tgenre: '',\r\n\t\tthreadText: '',\r\n\t},\r\n\treducers: {\r\n\t\tUPDATE_GENRE: (state, action) => {\r\n\t\t\tstate.genre = action.payload;\r\n\t\t},\r\n\t\tUPDATE_THREADTEXT: (state, action) => {\r\n\t\t\tstate.threadText = action.payload;\r\n\t\t},\r\n\t},\r\n});\r\n","import { threadSlice } from './threadSlice';\r\n\r\nexport const { UPDATE_GENRE, UPDATE_THREADTEXT } = threadSlice.actions;\r\n\r\nexport default { thread: threadSlice.reducer };\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './reducers';\r\n\r\nexport default configureStore({\r\n\treducer: rootReducer,\r\n});\r\n","import React from 'react';\r\nimport HTMLFlipBook from \"react-pageflip\";\r\nimport image from \"../../utils/images/fantasy-book.jpg\"\r\nimport background from \"../../utils/images/background.jpg\"\r\n\r\nconst PageCover = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"Page\" ref={ref} data-density=\"hard\">\r\n      <div className=\"hard\">\r\n        <h2>{props.children}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst PageContent = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"Page\" ref={ref} data-density=\"hard\">\r\n      <div className=\"pageCover\">\r\n        <h2>{props.children}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Page = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"Page\" ref={ref}>\r\n      <h2 className=\"pageHeader\">Page Header</h2>\r\n      <div className=\"pageImage\"><img src={image} alt=\"fantasy-category\"/></div>\r\n      <div className=\"pageText\">{props.children}</div>\r\n      <div className=\"pageFooter\">Page number: {props.number}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\r\n\r\nfunction Book(props) {\r\n  return (\r\n    <div className=\"container\">\r\n    <div className=\"bookContainer\">\r\n      <HTMLFlipBook width={500} height={600}>\r\n        <PageCover></PageCover>\r\n        <PageContent>BOOK TITLE</PageContent>\r\n        <Page number=\"1\">{text}</Page>\r\n        <Page number=\"2\">{text}</Page>\r\n        <Page number=\"3\">{text}</Page>\r\n        <Page number=\"4\">{text}</Page>\r\n        <Page number=\"5\">{text}</Page>\r\n        <PageContent></PageContent>\r\n        <PageCover> </PageCover>\r\n      </HTMLFlipBook>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Book;","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport '../index.css'\r\n\r\n\r\nconst Home = () => {\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<div class=\"container-fluid\">\r\n  \r\n    <div class=\"col\">\r\n\t<Link to=\"/threads/fantasy\">  \r\n<img src=\"images/fantasy-book.jpg\"/>\r\n\t\r\n\t</Link> \r\n    </div>\r\n\r\n\t<div class=\"col\">\r\n\t<Link to=\"/threads/adventure\">  \r\n\t<img src=\"images/adventure.jpg\" />\r\n\t</Link> \r\n    </div>\r\n\t\r\n\r\n    <div class=\"col\">\r\n\t<Link to=\"/threads/romance\">  \r\n\t<img src=\"images/heart-book.jpg\" />\r\n\t</Link> \r\n    </div>\r\n\t<div class=\"col\">\r\n\t<Link to=\"/threads/mystery\">  \r\n\t<img src=\"images/mystery-book.png\" />\r\n\t</Link> \r\n    </div>\r\n\t</div>\r\n\t\t\t\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n\treturn <div>Oops, we couldn't find that page.</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN = gql`\r\n\tmutation login($username: String!, $password: String!) {\r\n\t\tlogin(username: $username, password: $password) {\r\n\t\t\ttoken\r\n\t\t\tuser {\r\n\t\t\t\t_id\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n\tmutation addUser($username: String!, $email: String!, $password: String!) {\r\n\t\taddUser(username: $username, email: $email, password: $password) {\r\n\t\t\ttoken\r\n\t\t\tuser {\r\n\t\t\t\t_id\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n// addThread(threadText: String!): Thread\r\nexport const ADD_THREAD = gql`\r\n\tmutation addThread($threadText: String!, $genre: String!) {\r\n\t\taddThread(threadText: $threadText, genre: $genre) {\r\n            _id\r\n\t\t\tthreadText\r\n\t\t\tgenre\r\n\t\t\tcreatedAt\r\n\t\t\tusername\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n// addPost(threadId: ID!, postBody: String!): Thread\r\nexport const ADD_POST = gql`\r\n\tmutation addPost($threadId: ID!, $postBody: String!) {\r\n\t\taddPost(threadId: $threadId, postBody: $postBody) {\r\n            _id\r\n\t\t\tthreadText\r\n\t\t\tgenre\r\n\t\t\tcreatedAt\r\n\t\t\tusername\r\n\t\t\tposts {\r\n                _id\r\n\t\t\t\tpostBody\r\n\t\t\t\tusername\r\n\t\t\t\tcreatedAt\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n// addFriend(friendId: ID!): User\r\nexport const ADD_FRIEND = gql`\r\n\tmutation addFriend($friendId: ID!) {\r\n\t\taddFriend(friendId: $friendId) {\r\n\t\t\t_id\r\n            username\r\n            friends {\r\n                _id\r\n                username\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n\tgetProfile() {\r\n\t\treturn decode(this.getToken());\r\n\t}\r\n\r\n\tloggedIn() {\r\n\t\t// Checks if there is a saved token and it's still valid\r\n\t\tconst token = this.getToken();\r\n\t\treturn !!token && !this.isTokenExpired(token);\r\n\t}\r\n\r\n\tisTokenExpired(token) {\r\n\t\ttry {\r\n\t\t\tconst decoded = decode(token);\r\n\t\t\tif (decoded.exp < Date.now() / 1000) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else return false;\r\n\t\t} catch (err) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tgetToken() {\r\n\t\t// Retrieves the user token from localStorage\r\n\t\treturn localStorage.getItem('id_token');\r\n\t}\r\n\r\n\tlogin(idToken) {\r\n\t\t// Saves user token to localStorage\r\n\t\tlocalStorage.setItem('id_token', idToken);\r\n\r\n\t\twindow.location.assign('/');\r\n\t}\r\n\r\n\tlogout() {\r\n\t\t// Clear user token and profile data from localStorage\r\n\t\tlocalStorage.removeItem('id_token');\r\n\t\t// this will reload the page and reset the state of the application\r\n\t\twindow.location.assign('/');\r\n\t}\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { LOGIN } from '../../utils/mutations';\r\nimport Auth from '../../utils/auth';\r\n\r\nconst Login = () => {\r\n\tconst [formState, setFormState] = useState({ username: '', password: '' });\r\n\tconst [errorMessage, setErrorMessage] = useState('');\r\n\tconst [login, { error }] = useMutation(LOGIN);\r\n\r\n\t// update state based on form input changes\r\n\tconst handleChange = (event) => {\r\n\t\tconst { name, value } = event.target;\r\n\r\n\t\tsetFormState({\r\n\t\t\t...formState,\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t};\r\n\r\n\t// submit form\r\n\tconst handleFormSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif (formState.username && formState.password.length >= 5) {\r\n\t\t\ttry {\r\n\t\t\t\tconst { data } = await login({\r\n\t\t\t\t\tvariables: { ...formState },\r\n\t\t\t\t});\r\n\r\n\t\t\t\tAuth.login(data.login.token);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t\t// clear form values\r\n\t\t\tsetFormState({\r\n\t\t\t\tusername: '',\r\n\t\t\t\tpassword: '',\r\n\t\t\t});\r\n\t\t} else if (!formState.username) {\r\n\t\t\tsetErrorMessage('Username is required');\r\n\t\t} else {\r\n\t\t\tsetErrorMessage('Password must be at least 5 characters');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleFormSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-input'\r\n\t\t\t\t\tplaceholder='Your username'\r\n\t\t\t\t\tname='username'\r\n\t\t\t\t\ttype='username'\r\n\t\t\t\t\tid='username'\r\n\t\t\t\t\tvalue={formState.username}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-input'\r\n\t\t\t\t\tplaceholder='******'\r\n\t\t\t\t\tname='password'\r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tid='password'\r\n\t\t\t\t\tvalue={formState.password}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button className='btn d-block w-100' type='submit'>\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t\t{errorMessage && <div>{errorMessage}</div>}\r\n\t\t\t{error && <div>Incorrect Credentials</div>}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst Signup = () => {\r\n  const [formState, setFormState] = useState({ username: '', email: '', password: '' });\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n  \r\n    // use try/catch instead of promises to handle errors\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...formState }\r\n      });\r\n    \r\n      Auth.login(data.addUser.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <main className='flex-row justify-center mb-4'>\r\n      <div className='col-12 col-md-6'>\r\n        <div className='card'>\r\n          <h4 className='card-header'>Sign Up</h4>\r\n          <div className='card-body'>\r\n            <form onSubmit={handleFormSubmit}>\r\n              <input\r\n                className='form-input'\r\n                placeholder='Your username'\r\n                name='username'\r\n                type='username'\r\n                id='username'\r\n                value={formState.username}\r\n                onChange={handleChange}\r\n              />\r\n              <input\r\n                className='form-input'\r\n                placeholder='Your email'\r\n                name='email'\r\n                type='email'\r\n                id='email'\r\n                value={formState.email}\r\n                onChange={handleChange}\r\n              />\r\n              <input\r\n                className='form-input'\r\n                placeholder='******'\r\n                name='password'\r\n                type='password'\r\n                id='password'\r\n                value={formState.password}\r\n                onChange={handleChange}\r\n              />\r\n              <button className='btn d-block w-100' type='submit'>\r\n                Submit\r\n              </button>\r\n            </form>\r\n            {error && <div>Sign up failed</div>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Nav, Navbar, Form, FormControl } from 'react-bootstrap';\r\nimport Auth from '../../utils/auth';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { UPDATE_GENRE, UPDATE_THREADTEXT } from '../../utils/reducers';\r\n\r\nconst NavBar = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst [genre, setGenre] = useState('Fantasy');\r\n\tconst [text, setText] = useState('');\r\n\r\n\tconst handleSearchTermChange = (event) => {\r\n\t\tsetText(event.target.value);\r\n\t};\r\n\r\n\tconst handleGenreChange = (event) => {\r\n\t\tsetGenre(event.target.value);\r\n\t};\r\n\r\n\tconst updateGlobalState = () => {\r\n\t\tdispatch(UPDATE_GENRE(genre));\r\n\t\tdispatch(UPDATE_THREADTEXT(text));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Navbar bg='dark' expand='lg' variant='dark'>\r\n\t\t\t<Navbar.Brand>\r\n\t\t\t\t<Link to='/' className='text-light' role='button'>\r\n\t\t\t\t\tBook Forum\r\n\t\t\t\t</Link>\r\n\t\t\t</Navbar.Brand>\r\n\t\t\t<Nav className='flex-row mr-auto'>\r\n\t\t\t\t{!Auth.loggedIn() ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<LinkContainer to='/login'>\r\n\t\t\t\t\t\t\t<Nav.Item className='text-light mx-2' role='button'>\r\n\t\t\t\t\t\t\t\tLogin\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t<LinkContainer to='/signup'>\r\n\t\t\t\t\t\t\t<Nav.Item className='text-light mx-2' role='button'>\r\n\t\t\t\t\t\t\t\tSignup\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<LinkContainer to='/#' onClick={Auth.logout}>\r\n\t\t\t\t\t\t\t<Nav.Item className='text-light mx-2' role='button'>\r\n\t\t\t\t\t\t\t\tLogout\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t\t<LinkContainer to='/dashboard'>\r\n\t\t\t\t\t\t\t<Nav.Item className='text-light mx-2' role='button'>\r\n\t\t\t\t\t\t\t\tDashBoard\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</Nav>\r\n\t\t\t<Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\t\t\t<Navbar.Collapse id='basic-navbar-nav'>\r\n\t\t\t\t<Form inline className='ml-auto'>\r\n\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\tsize='sm'\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Search'\r\n\t\t\t\t\t\tclassName='ml-auto my-2'\r\n\t\t\t\t\t\tonChange={handleSearchTermChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\tas='select'\r\n\t\t\t\t\t\tsize='sm'\r\n\t\t\t\t\t\tclassName='ml-2 my-2'\r\n\t\t\t\t\t\tonChange={handleGenreChange}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option>Fantasy</option>\r\n\t\t\t\t\t\t<option>Adventure</option>\r\n\t\t\t\t\t\t<option>Romance</option>\r\n\t\t\t\t\t\t<option>Mystery</option>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t<LinkContainer to='/threads' onClick={updateGlobalState}>\r\n\t\t\t\t\t\t<Nav.Item\r\n\t\t\t\t\t\t\tclassName='py-1 px-2 ml-sm-2 text-light border border-success border-radius rounded'\r\n\t\t\t\t\t\t\trole='button'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSearch\r\n\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t</LinkContainer>\r\n\t\t\t\t</Form>\r\n\t\t\t</Navbar.Collapse>\r\n\t\t</Navbar>\r\n\t);\r\n};;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport client from './utils/Apollo';\r\nimport { Provider } from 'react-redux';\r\nimport store from './utils/State';\r\nimport Book from './components/Book';\r\nimport Home from './pages/Home';\r\nimport NotFound from './pages/NotFound';\r\nimport Login from './components/LoginForm';\r\nimport Signup from './pages/Signup';\r\nimport NavBar from './components/NavBar';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<ApolloProvider client={client}>\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<NavBar />\r\n\t\t\t\t\t{/* <Book /> */}\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path='/' component={Home} />\r\n\t\t\t\t\t\t<Route exact path='/login' component={Login} />\r\n\t\t\t\t\t\t<Route exact path='/signup' component={Signup} />\r\n\t\t\t\t\t\t<Route exact path='/threads/:genre' component={Book} />\r\n\t\t\t\t\t\t<Route component={NotFound} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t\t{/* Footer */}\r\n\t\t\t\t</Router>\r\n\t\t\t</Provider>\r\n\t\t</ApolloProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}